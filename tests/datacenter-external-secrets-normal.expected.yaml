---
# Source: external-secrets-install/templates/s3-secret.yaml
apiVersion: "external-secrets.io/v1beta1"
kind: ExternalSecret
metadata:
  name: s3-secret
  namespace: external-secrets
spec:
  refreshInterval: 15s
  secretStoreRef:
    name: vault-backend
    kind: ClusterSecretStore
  target:
    name: s3-secret
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        "application.properties": "{{ .s3Secret | b64dec | toString }}"
        "s3Secret": "{{ .s3Secret | b64dec | toString }}"
  data:
    - secretKey: "s3Secret"
      remoteRef:
        key: secret/data/hub/aws
        property: s3Secret
---
# Source: external-secrets-install/templates/secret-git-repo-credentials.yaml
apiVersion: "external-secrets.io/v1beta1"
kind: ExternalSecret
metadata:
  name: git-repo-credentials
  namespace: manuela-ci
spec:
  refreshInterval: 15s
  secretStoreRef:
    name: vault-backend
    kind: ClusterSecretStore
  target:
    name: git-repo-credentials
    template:
      metadata:
        annotations:
          # Tekton magic, see https://tekton.dev/vault/pipelines-v0.15.2/auth/
          tekton.dev/git-0: https://github.com/PLAINTEXT
      type: kubernetes.io/basic-auth
  dataFrom:
  - extract:
      key: secret/data/hub/git
---
# Source: external-secrets-install/templates/secret-image-registry-credentials.yaml
apiVersion: "external-secrets.io/v1beta1"
kind: ExternalSecret
metadata:
  name: image-registry-credentials
  namespace: manuela-ci
spec:
  refreshInterval: 15s
  secretStoreRef:
    name: vault-backend
    kind: ClusterSecretStore
  target:
    name: image-registry-credentials
    template:
      metadata:
        annotations:
          # Tekton magic, see https://tekton.dev/vault/pipelines-v0.15.2/auth/
          tekton.dev/docker-0: https://quay.io
      type: kubernetes.io/basic-auth
  dataFrom:
  - extract:
      key: secret/data/hub/imageregistry
---
# Source: external-secrets-install/templates/datacenter-s3-secret-policy.yaml
apiVersion: policy.open-cluster-management.io/v1
kind: PlacementBinding
metadata:
  name: datacenter-secret-s3-placement-binding
placementRef:
  name: datacenter-secret-s3-placement
  kind: PlacementRule
  apiGroup: apps.open-cluster-management.io
subjects:
  - name: datacenter-secret-s3-policy
    kind: Policy
    apiGroup: policy.open-cluster-management.io
---
# Source: external-secrets-install/templates/datacenter-s3-secret-policy.yaml
# We need to run this on any managed cluster but not on the HUB
apiVersion: apps.open-cluster-management.io/v1
kind: PlacementRule
metadata:
  name: datacenter-secret-s3-placement
spec:
  # This should only go to the local cluster
  clusterConditions:
    - status: 'True'
      type: ManagedClusterConditionAvailable 
  clusterSelector:
    matchExpressions:
      - key: local-cluster
        operator: In
        values:
          - 'true'
---
# Source: external-secrets-install/templates/datacenter-s3-secret-policy.yaml
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: datacenter-secret-s3-policy
spec:
  remediationAction: enforce
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: datacenter-secret-s3
          annotations:
            apps.open-cluster-management.io/deployables: "secret"
        spec:
          remediationAction: enforce
          severity: med
          namespaceSelector:
            include:
              - default
          object-templates:
            - complianceType: mustonlyhave
              objectDefinition:
                kind: Secret
                type: Opaque
                metadata:
                  name: s3-secret
                  namespace: manuela-data-lake
                apiVersion: v1
                data:
                  application.properties: '{{hub (lookup "v1" "Secret" "external-secrets" "s3-secret").data.s3Secret hub}}'
            - complianceType: mustonlyhave
              objectDefinition:
                kind: Secret
                type: Opaque
                metadata:
                  name: s3-secret
                  namespace: manuela-tst-all
                apiVersion: v1
                data:
                  application.properties: '{{hub (lookup "v1" "Secret" "external-secrets" "s3-secret").data.s3Secret hub}}'
